// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"test/book/dal/model"
)

func newUserBooksDO(db *gorm.DB, opts ...gen.DOOption) userBooksDO {
	_userBooksDO := userBooksDO{}

	_userBooksDO.userBooksDODo.UseDB(db, opts...)
	_userBooksDO.userBooksDODo.UseModel(&model.UserBooksDO{})

	tableName := _userBooksDO.userBooksDODo.TableName()
	_userBooksDO.ALL = field.NewAsterisk(tableName)
	_userBooksDO.UserID = field.NewInt64(tableName, "user_id")
	_userBooksDO.BookID = field.NewInt64(tableName, "book_id")
	_userBooksDO.CreateTime = field.NewTime(tableName, "create_time")
	_userBooksDO.ID = field.NewInt32(tableName, "id")

	_userBooksDO.fillFieldMap()

	return _userBooksDO
}

// userBooksDO 用户书籍关联表
type userBooksDO struct {
	userBooksDODo userBooksDODo

	ALL        field.Asterisk
	UserID     field.Int64 // 用户ID
	BookID     field.Int64 // 书籍ID
	CreateTime field.Time  // 创建时间
	ID         field.Int32

	fieldMap map[string]field.Expr
}

func (u userBooksDO) Table(newTableName string) *userBooksDO {
	u.userBooksDODo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBooksDO) As(alias string) *userBooksDO {
	u.userBooksDODo.DO = *(u.userBooksDODo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBooksDO) updateTableName(table string) *userBooksDO {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt64(table, "user_id")
	u.BookID = field.NewInt64(table, "book_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.ID = field.NewInt32(table, "id")

	u.fillFieldMap()

	return u
}

func (u *userBooksDO) WithContext(ctx context.Context) IUserBooksDODo {
	return u.userBooksDODo.WithContext(ctx)
}

func (u userBooksDO) TableName() string { return u.userBooksDODo.TableName() }

func (u userBooksDO) Alias() string { return u.userBooksDODo.Alias() }

func (u userBooksDO) Columns(cols ...field.Expr) gen.Columns { return u.userBooksDODo.Columns(cols...) }

func (u *userBooksDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBooksDO) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["book_id"] = u.BookID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["id"] = u.ID
}

func (u userBooksDO) clone(db *gorm.DB) userBooksDO {
	u.userBooksDODo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBooksDO) replaceDB(db *gorm.DB) userBooksDO {
	u.userBooksDODo.ReplaceDB(db)
	return u
}

type userBooksDODo struct{ gen.DO }

type IUserBooksDODo interface {
	gen.SubQuery
	Debug() IUserBooksDODo
	WithContext(ctx context.Context) IUserBooksDODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBooksDODo
	WriteDB() IUserBooksDODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBooksDODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBooksDODo
	Not(conds ...gen.Condition) IUserBooksDODo
	Or(conds ...gen.Condition) IUserBooksDODo
	Select(conds ...field.Expr) IUserBooksDODo
	Where(conds ...gen.Condition) IUserBooksDODo
	Order(conds ...field.Expr) IUserBooksDODo
	Distinct(cols ...field.Expr) IUserBooksDODo
	Omit(cols ...field.Expr) IUserBooksDODo
	Join(table schema.Tabler, on ...field.Expr) IUserBooksDODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBooksDODo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBooksDODo
	Group(cols ...field.Expr) IUserBooksDODo
	Having(conds ...gen.Condition) IUserBooksDODo
	Limit(limit int) IUserBooksDODo
	Offset(offset int) IUserBooksDODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBooksDODo
	Unscoped() IUserBooksDODo
	Create(values ...*model.UserBooksDO) error
	CreateInBatches(values []*model.UserBooksDO, batchSize int) error
	Save(values ...*model.UserBooksDO) error
	First() (*model.UserBooksDO, error)
	Take() (*model.UserBooksDO, error)
	Last() (*model.UserBooksDO, error)
	Find() ([]*model.UserBooksDO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBooksDO, err error)
	FindInBatches(result *[]*model.UserBooksDO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBooksDO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBooksDODo
	Assign(attrs ...field.AssignExpr) IUserBooksDODo
	Joins(fields ...field.RelationField) IUserBooksDODo
	Preload(fields ...field.RelationField) IUserBooksDODo
	FirstOrInit() (*model.UserBooksDO, error)
	FirstOrCreate() (*model.UserBooksDO, error)
	FindByPage(offset int, limit int) (result []*model.UserBooksDO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBooksDODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBooksDODo) Debug() IUserBooksDODo {
	return u.withDO(u.DO.Debug())
}

func (u userBooksDODo) WithContext(ctx context.Context) IUserBooksDODo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBooksDODo) ReadDB() IUserBooksDODo {
	return u.Clauses(dbresolver.Read)
}

func (u userBooksDODo) WriteDB() IUserBooksDODo {
	return u.Clauses(dbresolver.Write)
}

func (u userBooksDODo) Session(config *gorm.Session) IUserBooksDODo {
	return u.withDO(u.DO.Session(config))
}

func (u userBooksDODo) Clauses(conds ...clause.Expression) IUserBooksDODo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBooksDODo) Returning(value interface{}, columns ...string) IUserBooksDODo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBooksDODo) Not(conds ...gen.Condition) IUserBooksDODo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBooksDODo) Or(conds ...gen.Condition) IUserBooksDODo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBooksDODo) Select(conds ...field.Expr) IUserBooksDODo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBooksDODo) Where(conds ...gen.Condition) IUserBooksDODo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBooksDODo) Order(conds ...field.Expr) IUserBooksDODo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBooksDODo) Distinct(cols ...field.Expr) IUserBooksDODo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBooksDODo) Omit(cols ...field.Expr) IUserBooksDODo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBooksDODo) Join(table schema.Tabler, on ...field.Expr) IUserBooksDODo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBooksDODo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBooksDODo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBooksDODo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBooksDODo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBooksDODo) Group(cols ...field.Expr) IUserBooksDODo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBooksDODo) Having(conds ...gen.Condition) IUserBooksDODo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBooksDODo) Limit(limit int) IUserBooksDODo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBooksDODo) Offset(offset int) IUserBooksDODo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBooksDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBooksDODo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBooksDODo) Unscoped() IUserBooksDODo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBooksDODo) Create(values ...*model.UserBooksDO) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBooksDODo) CreateInBatches(values []*model.UserBooksDO, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBooksDODo) Save(values ...*model.UserBooksDO) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBooksDODo) First() (*model.UserBooksDO, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBooksDO), nil
	}
}

func (u userBooksDODo) Take() (*model.UserBooksDO, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBooksDO), nil
	}
}

func (u userBooksDODo) Last() (*model.UserBooksDO, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBooksDO), nil
	}
}

func (u userBooksDODo) Find() ([]*model.UserBooksDO, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBooksDO), err
}

func (u userBooksDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBooksDO, err error) {
	buf := make([]*model.UserBooksDO, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBooksDODo) FindInBatches(result *[]*model.UserBooksDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBooksDODo) Attrs(attrs ...field.AssignExpr) IUserBooksDODo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBooksDODo) Assign(attrs ...field.AssignExpr) IUserBooksDODo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBooksDODo) Joins(fields ...field.RelationField) IUserBooksDODo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBooksDODo) Preload(fields ...field.RelationField) IUserBooksDODo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBooksDODo) FirstOrInit() (*model.UserBooksDO, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBooksDO), nil
	}
}

func (u userBooksDODo) FirstOrCreate() (*model.UserBooksDO, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBooksDO), nil
	}
}

func (u userBooksDODo) FindByPage(offset int, limit int) (result []*model.UserBooksDO, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBooksDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBooksDODo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBooksDODo) Delete(models ...*model.UserBooksDO) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBooksDODo) withDO(do gen.Dao) *userBooksDODo {
	u.DO = *do.(*gen.DO)
	return u
}
