// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"test/book/dal/model"
)

func newAlarmRuleChannelsDO(db *gorm.DB, opts ...gen.DOOption) alarmRuleChannelsDO {
	_alarmRuleChannelsDO := alarmRuleChannelsDO{}

	_alarmRuleChannelsDO.alarmRuleChannelsDODo.UseDB(db, opts...)
	_alarmRuleChannelsDO.alarmRuleChannelsDODo.UseModel(&model.AlarmRuleChannelsDO{})

	tableName := _alarmRuleChannelsDO.alarmRuleChannelsDODo.TableName()
	_alarmRuleChannelsDO.ALL = field.NewAsterisk(tableName)
	_alarmRuleChannelsDO.ID = field.NewInt64(tableName, "id")
	_alarmRuleChannelsDO.RuleID = field.NewInt64(tableName, "rule_id")
	_alarmRuleChannelsDO.ChannelID = field.NewInt64(tableName, "channel_id")
	_alarmRuleChannelsDO.CreateTime = field.NewTime(tableName, "create_time")
	_alarmRuleChannelsDO.UpdateTime = field.NewTime(tableName, "update_time")

	_alarmRuleChannelsDO.fillFieldMap()

	return _alarmRuleChannelsDO
}

type alarmRuleChannelsDO struct {
	alarmRuleChannelsDODo alarmRuleChannelsDODo

	ALL        field.Asterisk
	ID         field.Int64 // 自增id
	RuleID     field.Int64 // 规则id
	ChannelID  field.Int64 // 渠道id
	CreateTime field.Time  // 创建时间
	UpdateTime field.Time  // 更新时间

	fieldMap map[string]field.Expr
}

func (a alarmRuleChannelsDO) Table(newTableName string) *alarmRuleChannelsDO {
	a.alarmRuleChannelsDODo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alarmRuleChannelsDO) As(alias string) *alarmRuleChannelsDO {
	a.alarmRuleChannelsDODo.DO = *(a.alarmRuleChannelsDODo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alarmRuleChannelsDO) updateTableName(table string) *alarmRuleChannelsDO {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.RuleID = field.NewInt64(table, "rule_id")
	a.ChannelID = field.NewInt64(table, "channel_id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")

	a.fillFieldMap()

	return a
}

func (a *alarmRuleChannelsDO) WithContext(ctx context.Context) IAlarmRuleChannelsDODo {
	return a.alarmRuleChannelsDODo.WithContext(ctx)
}

func (a alarmRuleChannelsDO) TableName() string { return a.alarmRuleChannelsDODo.TableName() }

func (a alarmRuleChannelsDO) Alias() string { return a.alarmRuleChannelsDODo.Alias() }

func (a alarmRuleChannelsDO) Columns(cols ...field.Expr) gen.Columns {
	return a.alarmRuleChannelsDODo.Columns(cols...)
}

func (a *alarmRuleChannelsDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alarmRuleChannelsDO) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["rule_id"] = a.RuleID
	a.fieldMap["channel_id"] = a.ChannelID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
}

func (a alarmRuleChannelsDO) clone(db *gorm.DB) alarmRuleChannelsDO {
	a.alarmRuleChannelsDODo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alarmRuleChannelsDO) replaceDB(db *gorm.DB) alarmRuleChannelsDO {
	a.alarmRuleChannelsDODo.ReplaceDB(db)
	return a
}

type alarmRuleChannelsDODo struct{ gen.DO }

type IAlarmRuleChannelsDODo interface {
	gen.SubQuery
	Debug() IAlarmRuleChannelsDODo
	WithContext(ctx context.Context) IAlarmRuleChannelsDODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlarmRuleChannelsDODo
	WriteDB() IAlarmRuleChannelsDODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlarmRuleChannelsDODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlarmRuleChannelsDODo
	Not(conds ...gen.Condition) IAlarmRuleChannelsDODo
	Or(conds ...gen.Condition) IAlarmRuleChannelsDODo
	Select(conds ...field.Expr) IAlarmRuleChannelsDODo
	Where(conds ...gen.Condition) IAlarmRuleChannelsDODo
	Order(conds ...field.Expr) IAlarmRuleChannelsDODo
	Distinct(cols ...field.Expr) IAlarmRuleChannelsDODo
	Omit(cols ...field.Expr) IAlarmRuleChannelsDODo
	Join(table schema.Tabler, on ...field.Expr) IAlarmRuleChannelsDODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmRuleChannelsDODo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlarmRuleChannelsDODo
	Group(cols ...field.Expr) IAlarmRuleChannelsDODo
	Having(conds ...gen.Condition) IAlarmRuleChannelsDODo
	Limit(limit int) IAlarmRuleChannelsDODo
	Offset(offset int) IAlarmRuleChannelsDODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmRuleChannelsDODo
	Unscoped() IAlarmRuleChannelsDODo
	Create(values ...*model.AlarmRuleChannelsDO) error
	CreateInBatches(values []*model.AlarmRuleChannelsDO, batchSize int) error
	Save(values ...*model.AlarmRuleChannelsDO) error
	First() (*model.AlarmRuleChannelsDO, error)
	Take() (*model.AlarmRuleChannelsDO, error)
	Last() (*model.AlarmRuleChannelsDO, error)
	Find() ([]*model.AlarmRuleChannelsDO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmRuleChannelsDO, err error)
	FindInBatches(result *[]*model.AlarmRuleChannelsDO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlarmRuleChannelsDO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlarmRuleChannelsDODo
	Assign(attrs ...field.AssignExpr) IAlarmRuleChannelsDODo
	Joins(fields ...field.RelationField) IAlarmRuleChannelsDODo
	Preload(fields ...field.RelationField) IAlarmRuleChannelsDODo
	FirstOrInit() (*model.AlarmRuleChannelsDO, error)
	FirstOrCreate() (*model.AlarmRuleChannelsDO, error)
	FindByPage(offset int, limit int) (result []*model.AlarmRuleChannelsDO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlarmRuleChannelsDODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alarmRuleChannelsDODo) Debug() IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Debug())
}

func (a alarmRuleChannelsDODo) WithContext(ctx context.Context) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alarmRuleChannelsDODo) ReadDB() IAlarmRuleChannelsDODo {
	return a.Clauses(dbresolver.Read)
}

func (a alarmRuleChannelsDODo) WriteDB() IAlarmRuleChannelsDODo {
	return a.Clauses(dbresolver.Write)
}

func (a alarmRuleChannelsDODo) Session(config *gorm.Session) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Session(config))
}

func (a alarmRuleChannelsDODo) Clauses(conds ...clause.Expression) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alarmRuleChannelsDODo) Returning(value interface{}, columns ...string) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alarmRuleChannelsDODo) Not(conds ...gen.Condition) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alarmRuleChannelsDODo) Or(conds ...gen.Condition) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alarmRuleChannelsDODo) Select(conds ...field.Expr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alarmRuleChannelsDODo) Where(conds ...gen.Condition) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alarmRuleChannelsDODo) Order(conds ...field.Expr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alarmRuleChannelsDODo) Distinct(cols ...field.Expr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alarmRuleChannelsDODo) Omit(cols ...field.Expr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alarmRuleChannelsDODo) Join(table schema.Tabler, on ...field.Expr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alarmRuleChannelsDODo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alarmRuleChannelsDODo) RightJoin(table schema.Tabler, on ...field.Expr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alarmRuleChannelsDODo) Group(cols ...field.Expr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alarmRuleChannelsDODo) Having(conds ...gen.Condition) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alarmRuleChannelsDODo) Limit(limit int) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alarmRuleChannelsDODo) Offset(offset int) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alarmRuleChannelsDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alarmRuleChannelsDODo) Unscoped() IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Unscoped())
}

func (a alarmRuleChannelsDODo) Create(values ...*model.AlarmRuleChannelsDO) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alarmRuleChannelsDODo) CreateInBatches(values []*model.AlarmRuleChannelsDO, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alarmRuleChannelsDODo) Save(values ...*model.AlarmRuleChannelsDO) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alarmRuleChannelsDODo) First() (*model.AlarmRuleChannelsDO, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmRuleChannelsDO), nil
	}
}

func (a alarmRuleChannelsDODo) Take() (*model.AlarmRuleChannelsDO, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmRuleChannelsDO), nil
	}
}

func (a alarmRuleChannelsDODo) Last() (*model.AlarmRuleChannelsDO, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmRuleChannelsDO), nil
	}
}

func (a alarmRuleChannelsDODo) Find() ([]*model.AlarmRuleChannelsDO, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlarmRuleChannelsDO), err
}

func (a alarmRuleChannelsDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmRuleChannelsDO, err error) {
	buf := make([]*model.AlarmRuleChannelsDO, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alarmRuleChannelsDODo) FindInBatches(result *[]*model.AlarmRuleChannelsDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alarmRuleChannelsDODo) Attrs(attrs ...field.AssignExpr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alarmRuleChannelsDODo) Assign(attrs ...field.AssignExpr) IAlarmRuleChannelsDODo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alarmRuleChannelsDODo) Joins(fields ...field.RelationField) IAlarmRuleChannelsDODo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alarmRuleChannelsDODo) Preload(fields ...field.RelationField) IAlarmRuleChannelsDODo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alarmRuleChannelsDODo) FirstOrInit() (*model.AlarmRuleChannelsDO, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmRuleChannelsDO), nil
	}
}

func (a alarmRuleChannelsDODo) FirstOrCreate() (*model.AlarmRuleChannelsDO, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmRuleChannelsDO), nil
	}
}

func (a alarmRuleChannelsDODo) FindByPage(offset int, limit int) (result []*model.AlarmRuleChannelsDO, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alarmRuleChannelsDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alarmRuleChannelsDODo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alarmRuleChannelsDODo) Delete(models ...*model.AlarmRuleChannelsDO) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alarmRuleChannelsDODo) withDO(do gen.Dao) *alarmRuleChannelsDODo {
	a.DO = *do.(*gen.DO)
	return a
}
