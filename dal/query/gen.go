// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	AlarmChannelsDO     *alarmChannelsDO
	AlarmRuleChannelsDO *alarmRuleChannelsDO
	AlarmRulesDO        *alarmRulesDO
	BooksDO             *booksDO
	UserBooksDO         *userBooksDO
	UsersDO             *usersDO
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AlarmChannelsDO = &Q.AlarmChannelsDO
	AlarmRuleChannelsDO = &Q.AlarmRuleChannelsDO
	AlarmRulesDO = &Q.AlarmRulesDO
	BooksDO = &Q.BooksDO
	UserBooksDO = &Q.UserBooksDO
	UsersDO = &Q.UsersDO
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		AlarmChannelsDO:     newAlarmChannelsDO(db, opts...),
		AlarmRuleChannelsDO: newAlarmRuleChannelsDO(db, opts...),
		AlarmRulesDO:        newAlarmRulesDO(db, opts...),
		BooksDO:             newBooksDO(db, opts...),
		UserBooksDO:         newUserBooksDO(db, opts...),
		UsersDO:             newUsersDO(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AlarmChannelsDO     alarmChannelsDO
	AlarmRuleChannelsDO alarmRuleChannelsDO
	AlarmRulesDO        alarmRulesDO
	BooksDO             booksDO
	UserBooksDO         userBooksDO
	UsersDO             usersDO
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		AlarmChannelsDO:     q.AlarmChannelsDO.clone(db),
		AlarmRuleChannelsDO: q.AlarmRuleChannelsDO.clone(db),
		AlarmRulesDO:        q.AlarmRulesDO.clone(db),
		BooksDO:             q.BooksDO.clone(db),
		UserBooksDO:         q.UserBooksDO.clone(db),
		UsersDO:             q.UsersDO.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		AlarmChannelsDO:     q.AlarmChannelsDO.replaceDB(db),
		AlarmRuleChannelsDO: q.AlarmRuleChannelsDO.replaceDB(db),
		AlarmRulesDO:        q.AlarmRulesDO.replaceDB(db),
		BooksDO:             q.BooksDO.replaceDB(db),
		UserBooksDO:         q.UserBooksDO.replaceDB(db),
		UsersDO:             q.UsersDO.replaceDB(db),
	}
}

type queryCtx struct {
	AlarmChannelsDO     IAlarmChannelsDODo
	AlarmRuleChannelsDO IAlarmRuleChannelsDODo
	AlarmRulesDO        IAlarmRulesDODo
	BooksDO             IBooksDODo
	UserBooksDO         IUserBooksDODo
	UsersDO             IUsersDODo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AlarmChannelsDO:     q.AlarmChannelsDO.WithContext(ctx),
		AlarmRuleChannelsDO: q.AlarmRuleChannelsDO.WithContext(ctx),
		AlarmRulesDO:        q.AlarmRulesDO.WithContext(ctx),
		BooksDO:             q.BooksDO.WithContext(ctx),
		UserBooksDO:         q.UserBooksDO.WithContext(ctx),
		UsersDO:             q.UsersDO.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
