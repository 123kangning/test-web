// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"test/book/dal/model"
)

func newAlarmChannelsDO(db *gorm.DB, opts ...gen.DOOption) alarmChannelsDO {
	_alarmChannelsDO := alarmChannelsDO{}

	_alarmChannelsDO.alarmChannelsDODo.UseDB(db, opts...)
	_alarmChannelsDO.alarmChannelsDODo.UseModel(&model.AlarmChannelsDO{})

	tableName := _alarmChannelsDO.alarmChannelsDODo.TableName()
	_alarmChannelsDO.ALL = field.NewAsterisk(tableName)
	_alarmChannelsDO.ID = field.NewInt64(tableName, "id")
	_alarmChannelsDO.TenantID = field.NewInt64(tableName, "tenant_id")
	_alarmChannelsDO.ProjectID = field.NewInt64(tableName, "project_id")
	_alarmChannelsDO.Name = field.NewString(tableName, "name")
	_alarmChannelsDO.Groups = field.NewString(tableName, "groups")
	_alarmChannelsDO.Mod = field.NewInt32(tableName, "mod")
	_alarmChannelsDO.IsDeleted = field.NewInt32(tableName, "is_deleted")
	_alarmChannelsDO.CreatedBy = field.NewString(tableName, "created_by")
	_alarmChannelsDO.CreateTime = field.NewTime(tableName, "create_time")
	_alarmChannelsDO.UpdateTime = field.NewTime(tableName, "update_time")
	_alarmChannelsDO.Rules = alarmChannelsDOManyToManyRules{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Rules", "model.AlarmRulesDO"),
		Channels: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Rules.Channels", "model.AlarmChannelsDO"),
		},
	}

	_alarmChannelsDO.fillFieldMap()

	return _alarmChannelsDO
}

type alarmChannelsDO struct {
	alarmChannelsDODo alarmChannelsDODo

	ALL        field.Asterisk
	ID         field.Int64 // 自增id
	TenantID   field.Int64 // 租户ID
	ProjectID  field.Int64 // 项目ID
	Name       field.String
	Groups     field.String // 渠道信息
	Mod        field.Int32  // 外部可见
	IsDeleted  field.Int32  // 是否被删除
	CreatedBy  field.String
	CreateTime field.Time // 创建时间
	UpdateTime field.Time // 更新时间
	Rules      alarmChannelsDOManyToManyRules

	fieldMap map[string]field.Expr
}

func (a alarmChannelsDO) Table(newTableName string) *alarmChannelsDO {
	a.alarmChannelsDODo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alarmChannelsDO) As(alias string) *alarmChannelsDO {
	a.alarmChannelsDODo.DO = *(a.alarmChannelsDODo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alarmChannelsDO) updateTableName(table string) *alarmChannelsDO {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.TenantID = field.NewInt64(table, "tenant_id")
	a.ProjectID = field.NewInt64(table, "project_id")
	a.Name = field.NewString(table, "name")
	a.Groups = field.NewString(table, "groups")
	a.Mod = field.NewInt32(table, "mod")
	a.IsDeleted = field.NewInt32(table, "is_deleted")
	a.CreatedBy = field.NewString(table, "created_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")

	a.fillFieldMap()

	return a
}

func (a *alarmChannelsDO) WithContext(ctx context.Context) IAlarmChannelsDODo {
	return a.alarmChannelsDODo.WithContext(ctx)
}

func (a alarmChannelsDO) TableName() string { return a.alarmChannelsDODo.TableName() }

func (a alarmChannelsDO) Alias() string { return a.alarmChannelsDODo.Alias() }

func (a alarmChannelsDO) Columns(cols ...field.Expr) gen.Columns {
	return a.alarmChannelsDODo.Columns(cols...)
}

func (a *alarmChannelsDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alarmChannelsDO) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["tenant_id"] = a.TenantID
	a.fieldMap["project_id"] = a.ProjectID
	a.fieldMap["name"] = a.Name
	a.fieldMap["groups"] = a.Groups
	a.fieldMap["mod"] = a.Mod
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["created_by"] = a.CreatedBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime

}

func (a alarmChannelsDO) clone(db *gorm.DB) alarmChannelsDO {
	a.alarmChannelsDODo.ReplaceConnPool(db.Statement.ConnPool)
	a.Rules.db = db.Session(&gorm.Session{Initialized: true})
	a.Rules.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a alarmChannelsDO) replaceDB(db *gorm.DB) alarmChannelsDO {
	a.alarmChannelsDODo.ReplaceDB(db)
	a.Rules.db = db.Session(&gorm.Session{})
	return a
}

type alarmChannelsDOManyToManyRules struct {
	db *gorm.DB

	field.RelationField

	Channels struct {
		field.RelationField
	}
}

func (a alarmChannelsDOManyToManyRules) Where(conds ...field.Expr) *alarmChannelsDOManyToManyRules {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alarmChannelsDOManyToManyRules) WithContext(ctx context.Context) *alarmChannelsDOManyToManyRules {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alarmChannelsDOManyToManyRules) Session(session *gorm.Session) *alarmChannelsDOManyToManyRules {
	a.db = a.db.Session(session)
	return &a
}

func (a alarmChannelsDOManyToManyRules) Model(m *model.AlarmChannelsDO) *alarmChannelsDOManyToManyRulesTx {
	return &alarmChannelsDOManyToManyRulesTx{a.db.Model(m).Association(a.Name())}
}

func (a alarmChannelsDOManyToManyRules) Unscoped() *alarmChannelsDOManyToManyRules {
	a.db = a.db.Unscoped()
	return &a
}

type alarmChannelsDOManyToManyRulesTx struct{ tx *gorm.Association }

func (a alarmChannelsDOManyToManyRulesTx) Find() (result []*model.AlarmRulesDO, err error) {
	return result, a.tx.Find(&result)
}

func (a alarmChannelsDOManyToManyRulesTx) Append(values ...*model.AlarmRulesDO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alarmChannelsDOManyToManyRulesTx) Replace(values ...*model.AlarmRulesDO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alarmChannelsDOManyToManyRulesTx) Delete(values ...*model.AlarmRulesDO) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alarmChannelsDOManyToManyRulesTx) Clear() error {
	return a.tx.Clear()
}

func (a alarmChannelsDOManyToManyRulesTx) Count() int64 {
	return a.tx.Count()
}

func (a alarmChannelsDOManyToManyRulesTx) Unscoped() *alarmChannelsDOManyToManyRulesTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type alarmChannelsDODo struct{ gen.DO }

type IAlarmChannelsDODo interface {
	gen.SubQuery
	Debug() IAlarmChannelsDODo
	WithContext(ctx context.Context) IAlarmChannelsDODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlarmChannelsDODo
	WriteDB() IAlarmChannelsDODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlarmChannelsDODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlarmChannelsDODo
	Not(conds ...gen.Condition) IAlarmChannelsDODo
	Or(conds ...gen.Condition) IAlarmChannelsDODo
	Select(conds ...field.Expr) IAlarmChannelsDODo
	Where(conds ...gen.Condition) IAlarmChannelsDODo
	Order(conds ...field.Expr) IAlarmChannelsDODo
	Distinct(cols ...field.Expr) IAlarmChannelsDODo
	Omit(cols ...field.Expr) IAlarmChannelsDODo
	Join(table schema.Tabler, on ...field.Expr) IAlarmChannelsDODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmChannelsDODo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlarmChannelsDODo
	Group(cols ...field.Expr) IAlarmChannelsDODo
	Having(conds ...gen.Condition) IAlarmChannelsDODo
	Limit(limit int) IAlarmChannelsDODo
	Offset(offset int) IAlarmChannelsDODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmChannelsDODo
	Unscoped() IAlarmChannelsDODo
	Create(values ...*model.AlarmChannelsDO) error
	CreateInBatches(values []*model.AlarmChannelsDO, batchSize int) error
	Save(values ...*model.AlarmChannelsDO) error
	First() (*model.AlarmChannelsDO, error)
	Take() (*model.AlarmChannelsDO, error)
	Last() (*model.AlarmChannelsDO, error)
	Find() ([]*model.AlarmChannelsDO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmChannelsDO, err error)
	FindInBatches(result *[]*model.AlarmChannelsDO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlarmChannelsDO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlarmChannelsDODo
	Assign(attrs ...field.AssignExpr) IAlarmChannelsDODo
	Joins(fields ...field.RelationField) IAlarmChannelsDODo
	Preload(fields ...field.RelationField) IAlarmChannelsDODo
	FirstOrInit() (*model.AlarmChannelsDO, error)
	FirstOrCreate() (*model.AlarmChannelsDO, error)
	FindByPage(offset int, limit int) (result []*model.AlarmChannelsDO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlarmChannelsDODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alarmChannelsDODo) Debug() IAlarmChannelsDODo {
	return a.withDO(a.DO.Debug())
}

func (a alarmChannelsDODo) WithContext(ctx context.Context) IAlarmChannelsDODo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alarmChannelsDODo) ReadDB() IAlarmChannelsDODo {
	return a.Clauses(dbresolver.Read)
}

func (a alarmChannelsDODo) WriteDB() IAlarmChannelsDODo {
	return a.Clauses(dbresolver.Write)
}

func (a alarmChannelsDODo) Session(config *gorm.Session) IAlarmChannelsDODo {
	return a.withDO(a.DO.Session(config))
}

func (a alarmChannelsDODo) Clauses(conds ...clause.Expression) IAlarmChannelsDODo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alarmChannelsDODo) Returning(value interface{}, columns ...string) IAlarmChannelsDODo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alarmChannelsDODo) Not(conds ...gen.Condition) IAlarmChannelsDODo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alarmChannelsDODo) Or(conds ...gen.Condition) IAlarmChannelsDODo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alarmChannelsDODo) Select(conds ...field.Expr) IAlarmChannelsDODo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alarmChannelsDODo) Where(conds ...gen.Condition) IAlarmChannelsDODo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alarmChannelsDODo) Order(conds ...field.Expr) IAlarmChannelsDODo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alarmChannelsDODo) Distinct(cols ...field.Expr) IAlarmChannelsDODo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alarmChannelsDODo) Omit(cols ...field.Expr) IAlarmChannelsDODo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alarmChannelsDODo) Join(table schema.Tabler, on ...field.Expr) IAlarmChannelsDODo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alarmChannelsDODo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmChannelsDODo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alarmChannelsDODo) RightJoin(table schema.Tabler, on ...field.Expr) IAlarmChannelsDODo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alarmChannelsDODo) Group(cols ...field.Expr) IAlarmChannelsDODo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alarmChannelsDODo) Having(conds ...gen.Condition) IAlarmChannelsDODo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alarmChannelsDODo) Limit(limit int) IAlarmChannelsDODo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alarmChannelsDODo) Offset(offset int) IAlarmChannelsDODo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alarmChannelsDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmChannelsDODo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alarmChannelsDODo) Unscoped() IAlarmChannelsDODo {
	return a.withDO(a.DO.Unscoped())
}

func (a alarmChannelsDODo) Create(values ...*model.AlarmChannelsDO) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alarmChannelsDODo) CreateInBatches(values []*model.AlarmChannelsDO, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alarmChannelsDODo) Save(values ...*model.AlarmChannelsDO) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alarmChannelsDODo) First() (*model.AlarmChannelsDO, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmChannelsDO), nil
	}
}

func (a alarmChannelsDODo) Take() (*model.AlarmChannelsDO, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmChannelsDO), nil
	}
}

func (a alarmChannelsDODo) Last() (*model.AlarmChannelsDO, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmChannelsDO), nil
	}
}

func (a alarmChannelsDODo) Find() ([]*model.AlarmChannelsDO, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlarmChannelsDO), err
}

func (a alarmChannelsDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmChannelsDO, err error) {
	buf := make([]*model.AlarmChannelsDO, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alarmChannelsDODo) FindInBatches(result *[]*model.AlarmChannelsDO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alarmChannelsDODo) Attrs(attrs ...field.AssignExpr) IAlarmChannelsDODo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alarmChannelsDODo) Assign(attrs ...field.AssignExpr) IAlarmChannelsDODo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alarmChannelsDODo) Joins(fields ...field.RelationField) IAlarmChannelsDODo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alarmChannelsDODo) Preload(fields ...field.RelationField) IAlarmChannelsDODo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alarmChannelsDODo) FirstOrInit() (*model.AlarmChannelsDO, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmChannelsDO), nil
	}
}

func (a alarmChannelsDODo) FirstOrCreate() (*model.AlarmChannelsDO, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmChannelsDO), nil
	}
}

func (a alarmChannelsDODo) FindByPage(offset int, limit int) (result []*model.AlarmChannelsDO, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alarmChannelsDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alarmChannelsDODo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alarmChannelsDODo) Delete(models ...*model.AlarmChannelsDO) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alarmChannelsDODo) withDO(do gen.Dao) *alarmChannelsDODo {
	a.DO = *do.(*gen.DO)
	return a
}
